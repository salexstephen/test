cf login -a https://api.system.digifabric.cognizant.com --skip-ssl-validation
admin
fb53c042091f809792b3

padarabinda.panigrahi@cognizant.com
myMFRPaj004 

padarabinda.panigrahi@cognizant.com
myMFRPaj004

cf login -a https://api.cognizantone.org --skip-ssl-validation
BlueprintUser1
BlueprintUser1

cf cups mongo-bp -p "uri"


cf set-env cook TRUST_CERTS api.digifabric.cognizant.com

cf create-service -c '{ "git": { "uri": "https://github.com/spring-cloud-services-samples/cook-config"} }' p-config-server standard config-server

cf create-service -c '{ "git": { "uri": "https://github.com/spring-cloud-samples/config-repo"} }' p-config-server standard config-server

https://github.com/spring-cloud-services-samples/cook-config

openssl s_client -showcerts -connect config-2d52b5df-a604-455d-b587-074309fae861.apps.digifabric.cognizant.com:443

https://github.com/spring-cloud-samples/config-repo.git


    <dependency>
      <groupId>org.springframework.security</groupId>
      <artifactId>spring-security-rsa</artifactId>
      <version>1.0.3.RELEASE</version>
    </dependency>
	
	https://spring-cloud-broker.apps.digifabric.cognizant.com/dashboard/p-service-registry/82f81597-d68d-462a-89ce-3d68c58b9f29
	
	http.sslVerify=false
	
	supported_patterns : ["322cf63af034400898cb6e1719b8499a"]
	
	mongod --fork --logpath /var/log/mongodbqa.log --dbpath /data/db --port 10042
	
	https://github.com/cloudfoundry/ibm-websphere-liberty-buildpack.git

env:
   IBM_JVM_LICENSE: L-PMAA-A3Z8P2 
	
	Topics to Read
	12 factor--done
	new Java Features 1.8--done
	java design patterns
	microservices patterns	
	Spring Boot
	Angular2
	
	Factory Pattern: pass string and get Instance object
	Abstract Factory Pattern: Factory of Factory which can be implemented through abstract class.
	Singleton Pattern: Single Instance by private constructor and static method.
	Builder Pattern: Splitting the Complex task and smaller task
	Protoype Pattern: instead of creating new instance with the complex logic. will provide the clonable instance by implementing clonable interface
	Adapter Pattern: Enhance the existing functionality with the new functionality by introducing the adapter class
	Bridge Pattern: Bridge interface to integrate the interface implment class with the concrete class.
	Composite Pattern: grouping similar objects into a single object to bring like a tree structure.
	Facade Pattern: Facade pattern hides the complexities of the system and provides an interface to the client using which the client can access the system
	FlyWeight Pattern: tries to reuse existing objects by storing them and creates new object when no matching object is found using hashmap logic
	proxy Pattern: create object having original object to interface its functionality to outer world.
	mediator pattern: Mediator pattern is used to reduce communication complexity between multiple objects or classes. This pattern provides a mediator class which normally handles all the communications between different classes and supports easy maintenance of the code by loose coupling.
	Memento pattern : used to restore state of an object to a previous state. 
	Observer Pattern: Observer pattern is used when there is one-to-many relationship between objects such as if one object is modified, its depenedent objects are to be notified automatically. 
	State pattern: create objects which represent various states and a context object whose behavior varies as its state object changes
	Strategy pattern: reate objects which represent various strategies and a context object whose behavior varies as per its strategy object
	Template Pattern: an abstract class exposes defined way(s)/template(s) to execute its methods. Its subclasses can override the method implementation as per need but the invocation is to be in the same way
	MVC pattern:
	DAO pattern
	Front Controller: provide a centralized request handling mechanism so that all requests will be handled by a single handler
	Transfer Object Pattern: normal pojo
	